{"version":3,"sources":["components/GeoLocationForm.js","components/Loading.js","utils/config.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["GeoLocationForm","setLocation","setResult","result","setError","Geocode","setApiKey","process","useState","initialValue","setInitialValue","getLocation","city","fromAddress","then","res","lat","results","geometry","location","lng","catch","err","console","log","useEffect","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","disabled","Loading","className","upperLetter","string","toUpperCase","slice","convertDate","date","dateObject","Date","toLocaleString","weekday","setNumber","num","toFixed","imageUrl","image","Weather","error","weatherData","setWeatherData","loading","setLoading","daily","current","fetch","url","json","data","finally","length","temp","src","weather","icon","alt","description","map","item","index","dt","min","max","humidity","wind_speed","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.372f837c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Geocode from 'react-geocode';\r\n\r\nfunction GeoLocationForm({ \r\n  setLocation, \r\n  setResult, \r\n  result,\r\n  setError,\r\n}) {\r\n\r\n  const key = process.env.REACT_APP_GOOGLE_LOCATION_KEY;\r\n  Geocode.setApiKey(key);\r\n  const [initialValue, setInitialValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    getLocation(result);\r\n  }, [result]);\r\n\r\n  function getLocation(city) {\r\n    Geocode.fromAddress(city)\r\n      .then((res) => {\r\n        const lat = res.results[0].geometry.location.lat;\r\n        const lng = res.results[0].geometry.location.lng;\r\n        setLocation({ lat, lng });\r\n        setError(false);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setError(true);\r\n      })\r\n  }\r\n\r\n  function handleInputChange(e) {\r\n    setInitialValue(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    getLocation(initialValue);\r\n    setInitialValue(\"\");\r\n    setResult(initialValue);\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type='text'\r\n        placeholder='Введите город'\r\n        value={initialValue}\r\n        onChange={handleInputChange}\r\n      />\r\n      <button \r\n        type='submit'\r\n        disabled={initialValue === '' ? true : false}\r\n      >\r\n        {'>'}\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default GeoLocationForm;","import React from 'react';\r\n\r\nfunction Loading() {\r\n\r\n  return (\r\n    <div className='loading'>\r\n      <div className='animation'></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading;","const key = process.env.REACT_APP_WEATHER_ACCESS_KEY;\r\n\r\nexport const url = (lat, lng) => {\r\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&exclude=hourly,minutely&units=metric&lang=ru&appid=${key}`\r\n}\r\n\r\nexport const upperLetter = (string) => {\r\n  return string[0].toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport const convertDate = (date) => {\r\n  const milliseconds = date * 1000;\r\n  const dateObject = new Date(milliseconds);\r\n  return upperLetter(dateObject.toLocaleString(\"ru\", { weekday: \"long\" }))\r\n}\r\n\r\nexport const setNumber = (num) => {\r\n  return num.toFixed();\r\n}\r\n\r\nexport const imageUrl = (image) => {\r\n  return `http://openweathermap.org/img/wn/${image}.png`\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Loading from './Loading';\r\nimport { url, upperLetter, convertDate, setNumber, imageUrl } from '../utils/config';\r\n\r\n\r\nfunction Weather({ location, result, error }) {\r\n\r\n  const [weatherData, setWeatherData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const { lat, lng } = location;\r\n  const { daily, current } = weatherData;\r\n  const errorMsg = \"Ошибка... попробуйте другой город\";\r\n\r\n\r\n  useEffect(() => {\r\n    function getWeather() {\r\n      setLoading(true);\r\n      return fetch(url(lat, lng))\r\n        .then((res) => {\r\n          return res.json()\r\n        })\r\n        .then((data) => {\r\n          setWeatherData(data);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false);\r\n        });\r\n    }\r\n    getWeather();\r\n  }, [lat, lng]);\r\n\r\n  return (\r\n    <>\r\n      {weatherData.length === 0 ? <Loading /> :\r\n        <div className=\"content\">\r\n          <h1 className={`${error ? 'error' : ''}`}>\r\n            {error ? errorMsg : upperLetter(result)}\r\n          </h1>\r\n          {loading ? <Loading /> :\r\n            <>\r\n              <div className=\"current\">\r\n                <h2>{setNumber(current.temp)} °​C</h2>\r\n                <img\r\n                  className=\"image\"\r\n                  src={imageUrl(current.weather[0].icon)}\r\n                  alt=\"погода\"\r\n                />\r\n                <h3>{upperLetter(current.weather[0].description)}</h3>\r\n              </div>\r\n              <table>\r\n                <tbody>\r\n                  <tr>\r\n                    <th className=\"field\">День недели</th>\r\n                    <th></th>\r\n                    <th>Низкая</th>\r\n                    <th>Высокая</th>\r\n                    <th>ОВ %</th>\r\n                    <th>Скорость Ветра км/ч</th>\r\n                  </tr>\r\n                  {daily.map((item, index) => (\r\n                    <tr key={index}>\r\n                      <td className=\"day\">{convertDate(item.dt)}</td>\r\n                      <td>\r\n                        <img\r\n                          src={imageUrl(item.weather[0].icon)}\r\n                          alt=\"погода\"\r\n                        />\r\n                      </td>\r\n                      <td>{setNumber(item.temp.min)} °</td>\r\n                      <td>{setNumber(item.temp.max)} °</td>\r\n                      <td>{item.humidity}</td>\r\n                      <td>{setNumber(item.wind_speed)}</td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </>\r\n          }\r\n        </div>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Weather;","import './App.css';\nimport { useState } from 'react';\nimport GeoLocationForm from './components/GeoLocationForm';\nimport Weather from './components/Weather';\n\nexport default function App() {\n\n  const [location, setLocation] = useState(null);\n  const [result, setResult] = useState('Бостон');\n  const [error, setError] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <GeoLocationForm\n        setLocation={setLocation}\n        setResult={setResult}\n        setError={setError}\n        result={result}\n      />\n      {location &&\n        <Weather\n          location={location}\n          result={result}\n          error={error}\n        />\n      }\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}