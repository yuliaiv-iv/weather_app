{"version":3,"sources":["components/GeoLocationForm.js","components/Loading.js","utils/config.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["GeoLocationForm","setLocation","setResult","result","setError","Geocode","setApiKey","process","useState","initialValue","setInitialValue","getLocation","city","fromAddress","then","res","lat","results","geometry","location","lng","catch","err","console","log","useEffect","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","disabled","Loading","className","upperLetter","string","toUpperCase","slice","convertDate","date","dateObject","Date","toLocaleString","weekday","setNumber","num","toFixed","imageUrl","image","Weather","error","weatherData","setWeatherData","loading","setLoading","daily","current","fetch","url","json","data","finally","length","temp","src","weather","icon","alt","description","map","item","index","dt","min","max","humidity","wind_speed","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2bf51e2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Geocode from 'react-geocode';\n\nfunction GeoLocationForm({ \n  setLocation, \n  setResult, \n  result,\n  setError,\n}) {\n\n  const key = process.env.REACT_APP_GOOGLE_LOCATION_KEY;\n  Geocode.setApiKey(key);\n  const [initialValue, setInitialValue] = useState(\"\");\n\n  useEffect(() => {\n    getLocation(result);\n  }, [result]);\n\n  function getLocation(city) {\n    Geocode.fromAddress(city)\n      .then((res) => {\n        const lat = res.results[0].geometry.location.lat;\n        const lng = res.results[0].geometry.location.lng;\n        setLocation({ lat, lng });\n        setError(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setError(true);\n      })\n  }\n\n  function handleInputChange(e) {\n    setInitialValue(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    getLocation(initialValue);\n    setInitialValue(\"\");\n    setResult(initialValue);\n  }\n\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        placeholder='Type city or location'\n        value={initialValue}\n        onChange={handleInputChange}\n      />\n      <button \n        type='submit'\n        disabled={initialValue === '' ? true : false}\n      >\n        {'>'}\n      </button>\n    </form>\n  )\n}\n\nexport default GeoLocationForm;","import React from 'react';\n\nfunction Loading() {\n\n  return (\n    <div className='loading'>\n      <div className='animation'></div>\n    </div>\n  )\n}\n\nexport default Loading;","const key = process.env.REACT_APP_WEATHER_ACCESS_KEY;\n\nexport const url = (lat, lng) => {\n  return `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lng}&exclude=hourly,minutely&units=metric&lang=en&appid=${key}`\n}\n\nexport const upperLetter = (string) => {\n  return string[0].toUpperCase() + string.slice(1);\n}\n\nexport const convertDate = (date) => {\n  const milliseconds = date * 1000;\n  const dateObject = new Date(milliseconds);\n  return upperLetter(dateObject.toLocaleString(\"en\", { weekday: \"long\" }))\n}\n\nexport const setNumber = (num) => {\n  return num.toFixed();\n}\n\nexport const imageUrl = (image) => {\n  return `http://openweathermap.org/img/wn/${image}.png`\n}","import React, { useState, useEffect } from 'react';\nimport Loading from './Loading';\nimport { url, upperLetter, convertDate, setNumber, imageUrl } from '../utils/config';\n\n\nfunction Weather({ location, result, error }) {\n\n  const [weatherData, setWeatherData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { lat, lng } = location;\n  const { daily, current } = weatherData;\n  const errorMsg = \"Error... Search for other city or location\";\n\n\n  useEffect(() => {\n    function getWeather() {\n      setLoading(true);\n      return fetch(url(lat, lng))\n        .then((res) => {\n          return res.json()\n        })\n        .then((data) => {\n          setWeatherData(data);\n        })\n        .catch((err) => {\n          console.log(err);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    }\n    getWeather();\n  }, [lat, lng]);\n\n  return (\n    <>\n      {weatherData.length === 0 ? <Loading /> :\n        <div className=\"content\">\n          <h1 className={`${error ? 'error' : ''}`}>\n            {error ? errorMsg : upperLetter(result)}\n          </h1>\n          {loading ? <Loading /> :\n            <>\n              <div className=\"current\">\n                <h2>{setNumber(current.temp)} °​C</h2>\n                <img\n                  className=\"image\"\n                  src={imageUrl(current.weather[0].icon)}\n                  alt=\"weather\"\n                />\n                <h3>{upperLetter(current.weather[0].description)}</h3>\n              </div>\n              <table>\n                <tbody>\n                  <tr>\n                    <th className=\"field\">Week day</th>\n                    <th></th>\n                    <th>Low</th>\n                    <th>High</th>\n                    <th>Humidity %</th>\n                    <th>Wind km/hr</th>\n                  </tr>\n                  {daily.map((item, index) => (\n                    <tr key={index}>\n                      <td className=\"day\">{convertDate(item.dt)}</td>\n                      <td>\n                        <img\n                          src={imageUrl(item.weather[0].icon)}\n                          alt=\"weather\"\n                        />\n                      </td>\n                      <td>{setNumber(item.temp.min)} °</td>\n                      <td>{setNumber(item.temp.max)} °</td>\n                      <td>{item.humidity}</td>\n                      <td>{setNumber(item.wind_speed)}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </>\n          }\n        </div>\n      }\n    </>\n  );\n}\n\nexport default Weather;","import './App.css';\nimport { useState } from 'react';\nimport GeoLocationForm from './components/GeoLocationForm';\nimport Weather from './components/Weather';\n\nexport default function App() {\n\n  const [location, setLocation] = useState(null);\n  const [result, setResult] = useState('Boston');\n  const [error, setError] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <GeoLocationForm\n        setLocation={setLocation}\n        setResult={setResult}\n        setError={setError}\n        result={result}\n      />\n      {location &&\n        <Weather\n          location={location}\n          result={result}\n          error={error}\n        />\n      }\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}